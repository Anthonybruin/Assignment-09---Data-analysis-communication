{
  
    
        "post0": {
            "title": "My Title",
            "content": "Geopandas and census data . This notebook was originally authored by Yoh Kawano, spatial data scientist extraordinaire in UCLA&#39;s Office for Advanced Research Computing. . If you get into coding, a lot of your work will be trying to learn code and details about code libraries on your own! I would like you to go through all of the subsequent cells, read them, absorb what the results of the code execution are, and look up any pieces of code that do not make sense. When you finally make it through, you will be producing plots of spatial census data. . This notebook includes: . how and where to find and download census data | use geopandas library to read a geojson file | use contextily to add basemaps (documentation) | renaming columns | normalizing data columns | simple stats | adding basemaps | . Where to get census data? . Well, you have many options, including getting it directly from the source, the census bureau website itself. We also have, as part of the academic community, a great resource: Social Explorer. With a campus-wide license to have full access to their website, you can download any census variable, that pretty much existed... ever. And, with its easy-to-use user interface, this is a wonderful one-stop shop for your census needs. . But for data scientists, I recommend another source: censusreporter.org . . Data . For the purposes of this assignment, the data is already made available inside the file data/acs2019_5yr_B03002_14000US06037222001.geojson . The libraries . Note: it will be okay to get a warning. . # for general data wrangling tasks import pandas as pd # to read and visualize spatial data import geopandas as gpd # to provide basemaps import contextily as ctx # to give more power to your figures (plots) import matplotlib.pyplot as plt . . /opt/conda/lib/python3.9/site-packages/geopandas/_compat.py:106: UserWarning: The Shapely GEOS version (3.9.1-CAPI-1.14.2) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow. warnings.warn( . Importing data . In order to work with data in python, we need a library that will let us handle &quot;spatial data exploration.&quot; For this notebook, we will use geopandas to read and wrangle a geojson file. . Before continuing, try taking a little detour to find out how geojson files are constructed: . geojson.io | . This was previously a png image for geojson geojson:images/geojson.png . We make the call to load and read the data that was downloaded from census reporter. Take note of the relative path reference to find the file in your file directory. . # note the relative filepath! check where this file is located in your file list at left gdf = gpd.read_file(&#39;data/acs2019_5yr_B03002_14000US06037222001.geojson&#39;) . Preliminary inspection . A quick look at the size of the data. . gdf.shape . (2347, 45) . gdf.head() . geoid name B03002001 B03002001, Error B03002002 B03002002, Error B03002003 B03002003, Error B03002004 B03002004, Error ... B03002017, Error B03002018 B03002018, Error B03002019 B03002019, Error B03002020 B03002020, Error B03002021 B03002021, Error geometry . 0 05000US06037 | Los Angeles County, CA | 10081570.0 | 0.0 | 5193136.0 | 0.0 | 2641770.0 | 1343.0 | 790252.0 | 2958.0 | ... | 567.0 | 2083135.0 | 21995.0 | 174263.0 | 4915.0 | 103325.0 | 3658.0 | 70938.0 | 2605.0 | MULTIPOLYGON (((-118.70339 34.16859, -118.7033... | . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 443.0 | 3095.0 | 354.0 | 2616.0 | 306.0 | 19.0 | 15.0 | ... | 12.0 | 383.0 | 311.0 | 74.0 | 52.0 | 34.0 | 28.0 | 40.0 | 46.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 334.0 | 3258.0 | 344.0 | 2882.0 | 358.0 | 74.0 | 102.0 | ... | 12.0 | 48.0 | 55.0 | 0.0 | 12.0 | 0.0 | 12.0 | 0.0 | 12.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 484.0 | 3731.0 | 465.0 | 2986.0 | 435.0 | 198.0 | 165.0 | ... | 17.0 | 874.0 | 477.0 | 81.0 | 80.0 | 48.0 | 62.0 | 33.0 | 51.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 276.0 | 2338.0 | 236.0 | 1812.0 | 271.0 | 87.0 | 107.0 | ... | 12.0 | 497.0 | 231.0 | 45.0 | 42.0 | 11.0 | 18.0 | 34.0 | 39.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | . 5 rows × 45 columns . gdf.plot(figsize=(10,10)) . &lt;AxesSubplot:&gt; . gdf.sample() . geoid name B03002001 B03002001, Error B03002002 B03002002, Error B03002003 B03002003, Error B03002004 B03002004, Error ... B03002017, Error B03002018 B03002018, Error B03002019 B03002019, Error B03002020 B03002020, Error B03002021 B03002021, Error geometry . 1284 14000US06037430802 | Census Tract 4308.02, Los Angeles, CA | 4586.0 | 399.0 | 4121.0 | 412.0 | 600.0 | 164.0 | 15.0 | 24.0 | ... | 12.0 | 26.0 | 42.0 | 48.0 | 45.0 | 29.0 | 44.0 | 19.0 | 24.0 | MULTIPOLYGON (((-118.03124 34.12951, -118.0295... | . 1 rows × 45 columns . Data types . To get the data types, we will use .info(). . gdf.info() . &lt;class &#39;geopandas.geodataframe.GeoDataFrame&#39;&gt; RangeIndex: 2347 entries, 0 to 2346 Data columns (total 45 columns): # Column Non-Null Count Dtype -- -- 0 geoid 2347 non-null object 1 name 2347 non-null object 2 B03002001 2347 non-null float64 3 B03002001, Error 2347 non-null float64 4 B03002002 2347 non-null float64 5 B03002002, Error 2347 non-null float64 6 B03002003 2347 non-null float64 7 B03002003, Error 2347 non-null float64 8 B03002004 2347 non-null float64 9 B03002004, Error 2347 non-null float64 10 B03002005 2347 non-null float64 11 B03002005, Error 2347 non-null float64 12 B03002006 2347 non-null float64 13 B03002006, Error 2347 non-null float64 14 B03002007 2347 non-null float64 15 B03002007, Error 2347 non-null float64 16 B03002008 2347 non-null float64 17 B03002008, Error 2347 non-null float64 18 B03002009 2347 non-null float64 19 B03002009, Error 2347 non-null float64 20 B03002010 2347 non-null float64 21 B03002010, Error 2347 non-null float64 22 B03002011 2347 non-null float64 23 B03002011, Error 2347 non-null float64 24 B03002012 2347 non-null float64 25 B03002012, Error 2347 non-null float64 26 B03002013 2347 non-null float64 27 B03002013, Error 2347 non-null float64 28 B03002014 2347 non-null float64 29 B03002014, Error 2347 non-null float64 30 B03002015 2347 non-null float64 31 B03002015, Error 2347 non-null float64 32 B03002016 2347 non-null float64 33 B03002016, Error 2347 non-null float64 34 B03002017 2347 non-null float64 35 B03002017, Error 2347 non-null float64 36 B03002018 2347 non-null float64 37 B03002018, Error 2347 non-null float64 38 B03002019 2347 non-null float64 39 B03002019, Error 2347 non-null float64 40 B03002020 2347 non-null float64 41 B03002020, Error 2347 non-null float64 42 B03002021 2347 non-null float64 43 B03002021, Error 2347 non-null float64 44 geometry 2347 non-null geometry dtypes: float64(42), geometry(1), object(2) memory usage: 825.2+ KB . The FIPS code . What is the geoid? It is called a FIPS code but why is it important? . https://www.census.gov/programs-surveys/geography/guidance/geo-identifiers.html | . This was an image explaining FIPS fips:images/fips.png . gdf.geoid.head() . 0 05000US06037 1 14000US06037101110 2 14000US06037101122 3 14000US06037101210 4 14000US06037101220 Name: geoid, dtype: object . . Source: ESRI . Delete county row . As we have observed, the first row in the data obtained from censusreporter is for the entire county. Keeping this row is problematic, as it represents a data record that is at a different scale. Let&#39;s delete it. . Important! . Note that any data downloaded from censusreporter will have a &quot;summary row&quot; for the entire data. gdf.head() . geoid name B03002001 B03002001, Error B03002002 B03002002, Error B03002003 B03002003, Error B03002004 B03002004, Error ... B03002017, Error B03002018 B03002018, Error B03002019 B03002019, Error B03002020 B03002020, Error B03002021 B03002021, Error geometry . 0 05000US06037 | Los Angeles County, CA | 10081570.0 | 0.0 | 5193136.0 | 0.0 | 2641770.0 | 1343.0 | 790252.0 | 2958.0 | ... | 567.0 | 2083135.0 | 21995.0 | 174263.0 | 4915.0 | 103325.0 | 3658.0 | 70938.0 | 2605.0 | MULTIPOLYGON (((-118.70339 34.16859, -118.7033... | . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 443.0 | 3095.0 | 354.0 | 2616.0 | 306.0 | 19.0 | 15.0 | ... | 12.0 | 383.0 | 311.0 | 74.0 | 52.0 | 34.0 | 28.0 | 40.0 | 46.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 334.0 | 3258.0 | 344.0 | 2882.0 | 358.0 | 74.0 | 102.0 | ... | 12.0 | 48.0 | 55.0 | 0.0 | 12.0 | 0.0 | 12.0 | 0.0 | 12.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 484.0 | 3731.0 | 465.0 | 2986.0 | 435.0 | 198.0 | 165.0 | ... | 17.0 | 874.0 | 477.0 | 81.0 | 80.0 | 48.0 | 62.0 | 33.0 | 51.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 276.0 | 2338.0 | 236.0 | 1812.0 | 271.0 | 87.0 | 107.0 | ... | 12.0 | 497.0 | 231.0 | 45.0 | 42.0 | 11.0 | 18.0 | 34.0 | 39.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | . 5 rows × 45 columns . gdf = gdf.drop([0]) . gdf.head() . geoid name B03002001 B03002001, Error B03002002 B03002002, Error B03002003 B03002003, Error B03002004 B03002004, Error ... B03002017, Error B03002018 B03002018, Error B03002019 B03002019, Error B03002020 B03002020, Error B03002021 B03002021, Error geometry . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 443.0 | 3095.0 | 354.0 | 2616.0 | 306.0 | 19.0 | 15.0 | ... | 12.0 | 383.0 | 311.0 | 74.0 | 52.0 | 34.0 | 28.0 | 40.0 | 46.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 334.0 | 3258.0 | 344.0 | 2882.0 | 358.0 | 74.0 | 102.0 | ... | 12.0 | 48.0 | 55.0 | 0.0 | 12.0 | 0.0 | 12.0 | 0.0 | 12.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 484.0 | 3731.0 | 465.0 | 2986.0 | 435.0 | 198.0 | 165.0 | ... | 17.0 | 874.0 | 477.0 | 81.0 | 80.0 | 48.0 | 62.0 | 33.0 | 51.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 276.0 | 2338.0 | 236.0 | 1812.0 | 271.0 | 87.0 | 107.0 | ... | 12.0 | 497.0 | 231.0 | 45.0 | 42.0 | 11.0 | 18.0 | 34.0 | 39.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | . 5 14000US06037101300 | Census Tract 1013, Los Angeles, CA | 3884.0 | 394.0 | 3587.0 | 363.0 | 3126.0 | 359.0 | 205.0 | 232.0 | ... | 12.0 | 45.0 | 38.0 | 28.0 | 32.0 | 28.0 | 32.0 | 0.0 | 12.0 | MULTIPOLYGON (((-118.27822 34.25068, -118.2782... | . 5 rows × 45 columns . The census data dictionary . There are a lot of columns. What are these columns? Column headers are defined in the metadata.json file that comes in the dowloaded zipfile from censusreporter. Click the link below to open the json file in another tab. . metadata.json | . For the purposes of this exercise, we will not choose to analyze subcategories within the Hispanic category, nor will we analyze breakdowns within the multiple race category. Let&#39;s identify which columns are needed, and which are not for our exploration. . This was for census variables. . Dropping columns . There are many columns that we do not need. . output existing columns as a list | create a list of columns to keep | redefine gdf with only the columns to keep | . list(gdf) # this is the same as df.columns.to_list() . [&#39;geoid&#39;, &#39;name&#39;, &#39;B03002001&#39;, &#39;B03002001, Error&#39;, &#39;B03002002&#39;, &#39;B03002002, Error&#39;, &#39;B03002003&#39;, &#39;B03002003, Error&#39;, &#39;B03002004&#39;, &#39;B03002004, Error&#39;, &#39;B03002005&#39;, &#39;B03002005, Error&#39;, &#39;B03002006&#39;, &#39;B03002006, Error&#39;, &#39;B03002007&#39;, &#39;B03002007, Error&#39;, &#39;B03002008&#39;, &#39;B03002008, Error&#39;, &#39;B03002009&#39;, &#39;B03002009, Error&#39;, &#39;B03002010&#39;, &#39;B03002010, Error&#39;, &#39;B03002011&#39;, &#39;B03002011, Error&#39;, &#39;B03002012&#39;, &#39;B03002012, Error&#39;, &#39;B03002013&#39;, &#39;B03002013, Error&#39;, &#39;B03002014&#39;, &#39;B03002014, Error&#39;, &#39;B03002015&#39;, &#39;B03002015, Error&#39;, &#39;B03002016&#39;, &#39;B03002016, Error&#39;, &#39;B03002017&#39;, &#39;B03002017, Error&#39;, &#39;B03002018&#39;, &#39;B03002018, Error&#39;, &#39;B03002019&#39;, &#39;B03002019, Error&#39;, &#39;B03002020&#39;, &#39;B03002020, Error&#39;, &#39;B03002021&#39;, &#39;B03002021, Error&#39;, &#39;geometry&#39;] . columns_to_keep = [&#39;geoid&#39;, &#39;name&#39;, &#39;B03002001&#39;, &#39;B03002002&#39;, &#39;B03002003&#39;, &#39;B03002004&#39;, &#39;B03002005&#39;, &#39;B03002006&#39;, &#39;B03002007&#39;, &#39;B03002008&#39;, &#39;B03002009&#39;, &#39;B03002012&#39;, &#39;geometry&#39;] . gdf = gdf[columns_to_keep] . gdf.head() . geoid name B03002001 B03002002 B03002003 B03002004 B03002005 B03002006 B03002007 B03002008 B03002009 B03002012 geometry . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 3095.0 | 2616.0 | 19.0 | 3.0 | 331.0 | 3.0 | 8.0 | 115.0 | 1188.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 3258.0 | 2882.0 | 74.0 | 15.0 | 220.0 | 0.0 | 0.0 | 67.0 | 147.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 3731.0 | 2986.0 | 198.0 | 0.0 | 486.0 | 0.0 | 47.0 | 14.0 | 2616.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 2338.0 | 1812.0 | 87.0 | 0.0 | 341.0 | 0.0 | 0.0 | 98.0 | 1364.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | . 5 14000US06037101300 | Census Tract 1013, Los Angeles, CA | 3884.0 | 3587.0 | 3126.0 | 205.0 | 0.0 | 194.0 | 0.0 | 0.0 | 62.0 | 297.0 | MULTIPOLYGON (((-118.27822 34.25068, -118.2782... | . Renaming columns . Let&#39;s rename the columns. First, create a list of column names as they are now. . list(gdf) # this is the same as df.columns.to_list() . [&#39;geoid&#39;, &#39;name&#39;, &#39;B03002001&#39;, &#39;B03002002&#39;, &#39;B03002003&#39;, &#39;B03002004&#39;, &#39;B03002005&#39;, &#39;B03002006&#39;, &#39;B03002007&#39;, &#39;B03002008&#39;, &#39;B03002009&#39;, &#39;B03002012&#39;, &#39;geometry&#39;] . Then, simply copy and paste the output list above, and define the columns with it. Replace the values with your desired column names . gdf.columns = [&#39;geoid&#39;, &#39;name&#39;, &#39;Total&#39;, &#39;Non Hispanic&#39;, &#39;Non Hispanic White&#39;, &#39;Non Hispanic Black&#39;, &#39;Non Hispanic American Indian and Alaska Native&#39;, &#39;Non Hispanic Asian&#39;, &#39;Non Hispanic Native Hawaiian and Other Pacific Islander&#39;, &#39;Non Hispanic Some other race&#39;, &#39;Non Hispanic Two or more races&#39;, &#39;Hispanic&#39;, &#39;geometry&#39;] . gdf.head() . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 3095.0 | 2616.0 | 19.0 | 3.0 | 331.0 | 3.0 | 8.0 | 115.0 | 1188.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 3258.0 | 2882.0 | 74.0 | 15.0 | 220.0 | 0.0 | 0.0 | 67.0 | 147.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 3731.0 | 2986.0 | 198.0 | 0.0 | 486.0 | 0.0 | 47.0 | 14.0 | 2616.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 2338.0 | 1812.0 | 87.0 | 0.0 | 341.0 | 0.0 | 0.0 | 98.0 | 1364.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | . 5 14000US06037101300 | Census Tract 1013, Los Angeles, CA | 3884.0 | 3587.0 | 3126.0 | 205.0 | 0.0 | 194.0 | 0.0 | 0.0 | 62.0 | 297.0 | MULTIPOLYGON (((-118.27822 34.25068, -118.2782... | . Double check your data integrity . Does the math add up? Let&#39;s check. The Total should equal the rest of the columns. . random_tract = gdf.sample() random_tract . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry . 1503 14000US06037503202 | Census Tract 5032.02, Los Angeles, CA | 5028.0 | 1166.0 | 617.0 | 31.0 | 0.0 | 505.0 | 0.0 | 0.0 | 13.0 | 3862.0 | MULTIPOLYGON (((-118.04442 33.93895, -118.0434... | . To get values from individual cells in a dataframe, use the iloc command. . iloc (documentation) | . While there are various methods to get cell values in python, the iloc command allows you to get to a cell based on the position of the record row and the column name. . # &quot;for the 0th record, get the value in the Total column&quot; random_tract.iloc[0][&#39;Total&#39;] . 5028.0 . print(&#39;Total population: &#39; + str(random_tract.iloc[0][&#39;Total&#39;])) . Total population: 5028.0 . print(&#39;Non Hispanic + Hispanic: &#39; + str(random_tract.iloc[0][&#39;Non Hispanic&#39;] + random_tract.iloc[0][&#39;Hispanic&#39;])) . Non Hispanic + Hispanic: 5028.0 . print(random_tract.iloc[0][&#39;Non Hispanic White&#39;] + random_tract.iloc[0][&#39;Non Hispanic Black&#39;] + random_tract.iloc[0][&#39;Non Hispanic American Indian and Alaska Native&#39;] + random_tract.iloc[0][&#39;Non Hispanic Asian&#39;] + random_tract.iloc[0][&#39;Non Hispanic Native Hawaiian and Other Pacific Islander&#39;] + random_tract.iloc[0][&#39;Non Hispanic Some other race&#39;] + random_tract.iloc[0][&#39;Non Hispanic Two or more races&#39;] + random_tract.iloc[0][&#39;Hispanic&#39;]) . 5028.0 . Simple stats and plots . gdf[&#39;Total&#39;].head() . 1 4283.0 2 3405.0 3 6347.0 4 3702.0 5 3884.0 Name: Total, dtype: float64 . gdf[&#39;Total&#39;].mean() . 4297.34441602728 . gdf[&#39;Total&#39;].median() . 4211.5 . gdf[&#39;Total&#39;].describe() . count 2346.000000 mean 4297.344416 std 1587.065962 min 0.000000 25% 3203.750000 50% 4211.500000 75% 5314.000000 max 12463.000000 Name: Total, dtype: float64 . gdf[&#39;Total&#39;].plot.hist(bins=50) . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; . Now it&#39;s your turn. Find some stats for different fields in the data and output them below. gdf[&#39;Non Hispanic Black&#39;].head() . 1 19.0 2 74.0 3 198.0 4 87.0 5 205.0 Name: Non Hispanic Black, dtype: float64 . gdf[&#39;Non Hispanic Black&#39;].mean() . 336.85080988917304 . gdf[&#39;Non Hispanic Black&#39;].median() . 138.0 . gdf[&#39;Non Hispanic Black&#39;].mode() . 0 0.0 dtype: float64 . gdf[&#39;Non Hispanic Black&#39;].std() . 563.7818106072826 . gdf[&#39;Non Hispanic Black&#39;].describe() . count 2346.000000 mean 336.850810 std 563.781811 min 0.000000 25% 43.000000 50% 138.000000 75% 364.750000 max 5737.000000 Name: Non Hispanic Black, dtype: float64 . gdf[&#39;Non Hispanic Black&#39;].plot.hist(bins=50) . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; . gdf[&#39;Non Hispanic Asian&#39;].head() . 1 331.0 2 220.0 3 486.0 4 341.0 5 194.0 Name: Non Hispanic Asian, dtype: float64 . gdf[&#39;Non Hispanic Asian&#39;].mean() . 620.1061381074169 . gdf[&#39;Non Hispanic Asian&#39;].median() . 371.5 . gdf[&#39;Non Hispanic Asian&#39;].mode() . 0 0.0 dtype: float64 . gdf[&#39;Non Hispanic Asian&#39;].std() . 764.6404187371829 . gdf[&#39;Non Hispanic Asian&#39;].describe() . count 2346.000000 mean 620.106138 std 764.640419 min 0.000000 25% 118.250000 50% 371.500000 75% 793.000000 max 5362.000000 Name: Non Hispanic Asian, dtype: float64 . gdf[&#39;Non Hispanic Asian&#39;].plot.hist(bins=50) . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; . Sorting . What are the top 10 most populated census tracts? What are the census tracts with the highest black popluation? To answer these questions, the simplest method is to sort the data by their respective columns. . gdf_sorted = gdf.sort_values(by=&#39;Total&#39;,ascending = False) . gdf_sorted[[&#39;geoid&#39;,&#39;Total&#39;]].head(10) . geoid Total . 2198 14000US06037901004 | 12463.0 | . 923 14000US06037275602 | 12100.0 | . 848 14000US06037265301 | 11977.0 | . 2236 14000US06037910705 | 11613.0 | . 2206 14000US06037901205 | 10783.0 | . 2275 14000US06037920037 | 10318.0 | . 2147 14000US06037702901 | 9852.0 | . 994 14000US06037300600 | 9609.0 | . 532 14000US06037206020 | 8947.0 | . 2192 14000US06037900803 | 8751.0 | . gdf_sorted.head(10).plot() . &lt;AxesSubplot:&gt; . gdf_sorted.head(100).plot(figsize=(10,10),column=&#39;Total&#39;,legend=True) . &lt;AxesSubplot:&gt; . Now it&#39;s your turn! Create a table and accompanying bar plot for the top/bottom x values for column of your choice. When you are done, post your map to the class gallery (right click the image, copy, and paste) gdf_sorted = gdf.sort_values(by=&#39;Hispanic&#39;,ascending = False) . gdf_sorted[[&#39;geoid&#39;,&#39;Hispanic&#39;]].head(10) . geoid Hispanic . 2236 14000US06037910705 | 8153.0 | . 706 14000US06037226700 | 7433.0 | . 1629 14000US06037535101 | 7113.0 | . 2275 14000US06037920037 | 7085.0 | . 1056 14000US06037320100 | 6930.0 | . 1648 14000US06037535902 | 6898.0 | . 1654 14000US06037540000 | 6788.0 | . 1674 14000US06037541400 | 6768.0 | . 1463 14000US06037500700 | 6667.0 | . 129 14000US06037119002 | 6644.0 | . gdf_sorted.head(10).plot() . &lt;AxesSubplot:&gt; . gdf_sorted.head(100).plot(figsize=(10,10),column=&#39;Hispanic&#39;,legend=True) . &lt;AxesSubplot:&gt; . Filtering and subsetting data . Sorting is one method, but the process of discovery compels us to interrogate the data in different ways. One method of doing so is to query, or filter the data to see specific views of the data based on a question you may have. For example, what are the census tracts that have no people in them? Or, Which census tracts are more than 75% black? . # in other words, this syntax is asking to &quot;show me the values in my dataframe that match this filter gdf[gdf[&#39;Total&#39;]==0] . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry . 1055 14000US06037320000 | Census Tract 3200, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.36215 34.13903, -118.3612... | . 2318 14000US06037980001 | Census Tract 9800.01, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.37031 34.20120, -118.3658... | . 2319 14000US06037980002 | Census Tract 9800.02, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.25753 33.80197, -118.2571... | . 2320 14000US06037980003 | Census Tract 9800.03, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.14019 34.78468, -118.1401... | . 2321 14000US06037980004 | Census Tract 9800.04, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.12795 34.64591, -118.1274... | . 2322 14000US06037980005 | Census Tract 9800.05, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.35210 33.85818, -118.3517... | . 2323 14000US06037980006 | Census Tract 9800.06, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.09420 33.78670, -118.0941... | . 2324 14000US06037980007 | Census Tract 9800.07, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.11512 33.76305, -118.1135... | . 2328 14000US06037980013 | Census Tract 9800.13, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.39627 33.92804, -118.3962... | . 2331 14000US06037980018 | Census Tract 9800.18, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.18066 33.80597, -118.1806... | . 2333 14000US06037980020 | Census Tract 9800.20, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.34412 34.21700, -118.3438... | . 2335 14000US06037980022 | Census Tract 9800.22, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.50266 34.30809, -118.5026... | . 2336 14000US06037980023 | Census Tract 9800.23, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.64870 34.23120, -118.6480... | . 2338 14000US06037980025 | Census Tract 9800.25, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.25712 33.83927, -118.2571... | . 2340 14000US06037980028 | Census Tract 9800.28, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.45246 33.94315, -118.4464... | . 2341 14000US06037980030 | Census Tract 9800.30, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.43712 33.91639, -118.4299... | . 2344 14000US06037990100 | Census Tract 9901, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.95114 33.99643, -118.9505... | . 2345 14000US06037990200 | Census Tract 9902, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.63598 34.03255, -118.6325... | . 2346 14000US06037990300 | Census Tract 9903, Los Angeles, CA | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.47656 33.75038, -118.4661... | . Note that unless you specify the resulting output as a new variable, the results are only temporary (in memory). If you want to use the results for subsequent analysis, you need to create a new variable. . gdf_no_pop = gdf[gdf[&#39;Total&#39;]==0] . print(&#39;There are &#39; + str(len(gdf_no_pop)) + &#39; census tracts with no people in them&#39;) . There are 19 census tracts with no people in them . gdf_no_pop[[&#39;geoid&#39;,&#39;Total&#39;]] . geoid Total . 1055 14000US06037320000 | 0.0 | . 2318 14000US06037980001 | 0.0 | . 2319 14000US06037980002 | 0.0 | . 2320 14000US06037980003 | 0.0 | . 2321 14000US06037980004 | 0.0 | . 2322 14000US06037980005 | 0.0 | . 2323 14000US06037980006 | 0.0 | . 2324 14000US06037980007 | 0.0 | . 2328 14000US06037980013 | 0.0 | . 2331 14000US06037980018 | 0.0 | . 2333 14000US06037980020 | 0.0 | . 2335 14000US06037980022 | 0.0 | . 2336 14000US06037980023 | 0.0 | . 2338 14000US06037980025 | 0.0 | . 2340 14000US06037980028 | 0.0 | . 2341 14000US06037980030 | 0.0 | . 2344 14000US06037990100 | 0.0 | . 2345 14000US06037990200 | 0.0 | . 2346 14000US06037990300 | 0.0 | . Totals are great but let&#39;s normalize the data . For almost any data inquiry, you should ask the question: should I normalize the data? With raw numbers, is it fair to compare one census tract to another? For example, if one census tract has 1000 hispanics, and another has 100, can we assume that the first tract is largely Hispanic? No, because the total population might be 10000 people, resulting in it being 10% hispanic, whereas the second tract might have 200 people living in it, resulting in it being 50% hispanic. . To avoid these types of misrepresentations, we can normalize the data, and provide it as a percent of total. . list(gdf) . [&#39;geoid&#39;, &#39;name&#39;, &#39;Total&#39;, &#39;Non Hispanic&#39;, &#39;Non Hispanic White&#39;, &#39;Non Hispanic Black&#39;, &#39;Non Hispanic American Indian and Alaska Native&#39;, &#39;Non Hispanic Asian&#39;, &#39;Non Hispanic Native Hawaiian and Other Pacific Islander&#39;, &#39;Non Hispanic Some other race&#39;, &#39;Non Hispanic Two or more races&#39;, &#39;Hispanic&#39;, &#39;geometry&#39;] . gdf[&#39;Percent Non Hispanic&#39;] = gdf[&#39;Non Hispanic&#39;]/gdf[&#39;Total&#39;]*100 gdf[&#39;Percent Hispanic&#39;] = gdf[&#39;Hispanic&#39;]/gdf[&#39;Total&#39;]*100 . gdf.sample(5) . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry Percent Non Hispanic Percent Hispanic . 2306 14000US06037920329 | Census Tract 9203.29, Los Angeles, CA | 7152.0 | 5857.0 | 4726.0 | 238.0 | 0.0 | 565.0 | 0.0 | 0.0 | 328.0 | 1295.0 | MULTIPOLYGON (((-118.56259 34.41965, -118.5624... | 81.893177 | 18.106823 | . 1463 14000US06037500700 | Census Tract 5007, Los Angeles, CA | 7150.0 | 483.0 | 315.0 | 27.0 | 0.0 | 78.0 | 0.0 | 0.0 | 63.0 | 6667.0 | MULTIPOLYGON (((-118.11156 33.99183, -118.1115... | 6.755245 | 93.244755 | . 2275 14000US06037920037 | Census Tract 9200.37, Los Angeles, CA | 10318.0 | 3233.0 | 1803.0 | 521.0 | 34.0 | 551.0 | 0.0 | 0.0 | 324.0 | 7085.0 | MULTIPOLYGON (((-118.45989 34.40927, -118.4596... | 31.333592 | 68.666408 | . 815 14000US06037241300 | Census Tract 2413, Los Angeles, CA | 2480.0 | 1271.0 | 78.0 | 1142.0 | 0.0 | 7.0 | 8.0 | 0.0 | 36.0 | 1209.0 | MULTIPOLYGON (((-118.29154 33.92732, -118.2915... | 51.250000 | 48.750000 | . 2066 14000US06037650603 | Census Tract 6506.03, Los Angeles, CA | 3849.0 | 3543.0 | 1673.0 | 223.0 | 0.0 | 1525.0 | 0.0 | 19.0 | 103.0 | 306.0 | MULTIPOLYGON (((-118.37714 33.84858, -118.3770... | 92.049883 | 7.950117 | . Now it&#39;s your turn! Create new columns for - `Percent Non Hispanic White` - `Percent Non Hispanic Black` - `Percent Non Hispanic American Indian and Alaska Native` - `Percent Non Hispanic Asian` - `Percent Non Hispanic Native Hawaiian and Other Pacific Islander` - `Percent Non Hispanic Some other race` - `Percent Non Hispanic Two or more races` gdf[&#39;Percent Non Hispanic Black&#39;] = gdf[&#39;Non Hispanic Black&#39;]/gdf[&#39;Total&#39;]*100 #gdf[&#39;Percent Hispanic&#39;] = gdf[&#39;Hispanic&#39;]/gdf[&#39;Total&#39;]*100 gdf[&#39;Percent Non Hispanic Asian&#39;]=gdf[&#39;Non Hispanic Asian&#39;]/gdf[&#39;Total&#39;]*100 . Maps! . We can now create choropleth maps in geopandas. . geopandas choropleth maps | color schemes with mapclassify natural_breaks | equal_interval | quantiles | etc... | . | . gdf.plot(figsize=(12,10), column=&#39;Percent Hispanic&#39;, legend=True, scheme=&#39;NaturalBreaks&#39;) . &lt;AxesSubplot:&gt; . gdf.plot(figsize=(12,10), column=&#39;Percent Hispanic&#39;, legend=True, scheme=&#39;equal_interval&#39;) . &lt;AxesSubplot:&gt; . gdf.plot(figsize=(12,10), column=&#39;Percent Hispanic&#39;, legend=True, scheme=&#39;quantiles&#39;) . &lt;AxesSubplot:&gt; . Using subplots to create multiple plots . It is often useful to generate multiple plots next to each other. To do so, we look at matplotlib&#39;s subplot command: . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.subplots.html | . fig, axs = plt.subplots(1, 2, figsize=(15, 12)) # name each subplot ax1, ax2 = axs # regular count map on the left gdf.plot(column=&#39;Percent Hispanic&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax1, # this assigns the map to the subplot, legend=True ) ax1.axis(&quot;off&quot;) ax1.set_title(&quot;Percent Hispanic&quot;) # spatial lag map on the right #Why is it giving me a key error gdf.plot(column=&#39;Percent Non Hispanic Black&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax2, # this assigns the map to the subplot legend=True ) ax2.axis(&quot;off&quot;) ax2.set_title(&quot;Percent Non Hispanic Black&quot;) . Text(0.5, 1.0, &#39;Percent Non Hispanic Black&#39;) . fig, axs = plt.subplots(1, 2, figsize=(15, 12)) # name each subplot ax1, ax2 = axs # regular count map on the left gdf.plot(column=&#39;Percent Non Hispanic Asian&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax1, # this assigns the map to the subplot, legend=True ) ax1.axis(&quot;off&quot;) ax1.set_title(&quot;Percent Non Hispanic Asian&quot;) # spatial lag map on the right #Why is it giving me a key error gdf.plot(column=&#39;Percent Non Hispanic Black&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax2, # this assigns the map to the subplot legend=True ) ax2.axis(&quot;off&quot;) ax2.set_title(&quot;Percent Non Hispanic Black&quot;) . Text(0.5, 1.0, &#39;Percent Non Hispanic Black&#39;) . gdf.columns . Index([&#39;geoid&#39;, &#39;name&#39;, &#39;Total&#39;, &#39;Non Hispanic&#39;, &#39;Non Hispanic White&#39;, &#39;Non Hispanic Black&#39;, &#39;Non Hispanic American Indian and Alaska Native&#39;, &#39;Non Hispanic Asian&#39;, &#39;Non Hispanic Native Hawaiian and Other Pacific Islander&#39;, &#39;Non Hispanic Some other race&#39;, &#39;Non Hispanic Two or more races&#39;, &#39;Hispanic&#39;, &#39;geometry&#39;, &#39;Percent Non Hispanic&#39;, &#39;Percent Hispanic&#39;, &#39;Percent Non Hispanic Black&#39;, &#39;Percent Non Hispanic Asian&#39;], dtype=&#39;object&#39;) . Now it&#39;s your turn! Create map plots based on other race indicators. Experiment with the different schemes to display variations of the same data, mapped differently. When you are done, post your map to the class gallery (right click the image, copy, and paste) fig, axs = plt.subplots(1, 2, figsize=(15, 12)) # name each subplot ax1, ax2 = axs # regular count map on the left gdf.plot(column=&#39;Percent Hispanic&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax1, # this assigns the map to the subplot, legend=True ) ax1.axis(&quot;off&quot;) ax1.set_title(&quot;Percent Hispanic&quot;) # spatial lag map on the right gdf.plot(column=&#39;Percent Non Hispanic Asian&#39;, cmap=&#39;RdYlGn_r&#39;, scheme=&#39;quantiles&#39;, k=5, edgecolor=&#39;white&#39;, linewidth=0., alpha=0.75, ax=ax2, # this assigns the map to the subplot legend=True ) ax2.axis(&quot;off&quot;) ax2.set_title(&quot;Percent Non Hispanic Asian&quot;) . Text(0.5, 1.0, &#39;Percent Non Hispanic Asian&#39;) . Additional mapping ideas . What does the majority ethnic cluster look like in Los Angeles? . gdf[gdf[&#39;Percent Hispanic&#39;] &gt; 80] . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry Percent Non Hispanic Percent Hispanic Percent Non Hispanic Black Percent Non Hispanic Asian . 18 14000US06037104108 | Census Tract 1041.08, Los Angeles, CA | 6001.0 | 1019.0 | 327.0 | 430.0 | 0.0 | 203.0 | 13.0 | 0.0 | 46.0 | 4982.0 | MULTIPOLYGON (((-118.40853 34.27071, -118.4065... | 16.980503 | 83.019497 | 7.165472 | 3.382770 | . 20 14000US06037104201 | Census Tract 1042.01, Los Angeles, CA | 4569.0 | 488.0 | 56.0 | 401.0 | 31.0 | 0.0 | 0.0 | 0.0 | 0.0 | 4081.0 | MULTIPOLYGON (((-118.42402 34.28533, -118.4232... | 10.680674 | 89.319326 | 8.776538 | 0.000000 | . 21 14000US06037104203 | Census Tract 1042.03, Los Angeles, CA | 5441.0 | 624.0 | 82.0 | 446.0 | 0.0 | 68.0 | 0.0 | 20.0 | 8.0 | 4817.0 | MULTIPOLYGON (((-118.41799 34.27964, -118.4170... | 11.468480 | 88.531520 | 8.197023 | 1.249770 | . 23 14000US06037104310 | Census Tract 1043.10, Los Angeles, CA | 4962.0 | 218.0 | 68.0 | 96.0 | 8.0 | 18.0 | 0.0 | 17.0 | 11.0 | 4744.0 | MULTIPOLYGON (((-118.44011 34.26727, -118.4399... | 4.393390 | 95.606610 | 1.934704 | 0.362757 | . 24 14000US06037104320 | Census Tract 1043.20, Los Angeles, CA | 5292.0 | 574.0 | 139.0 | 244.0 | 2.0 | 58.0 | 0.0 | 65.0 | 66.0 | 4718.0 | MULTIPOLYGON (((-118.42876 34.27236, -118.4285... | 10.846561 | 89.153439 | 4.610733 | 1.095994 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1977 14000US06037601802 | Census Tract 6018.02, Los Angeles, CA | 3945.0 | 378.0 | 109.0 | 141.0 | 8.0 | 120.0 | 0.0 | 0.0 | 0.0 | 3567.0 | MULTIPOLYGON (((-118.35696 33.94183, -118.3566... | 9.581749 | 90.418251 | 3.574144 | 3.041825 | . 1978 14000US06037601900 | Census Tract 6019, Los Angeles, CA | 4847.0 | 737.0 | 33.0 | 617.0 | 41.0 | 9.0 | 0.0 | 0.0 | 37.0 | 4110.0 | MULTIPOLYGON (((-118.34391 33.94545, -118.3434... | 15.205282 | 84.794718 | 12.729523 | 0.185682 | . 1980 14000US06037602003 | Census Tract 6020.03, Los Angeles, CA | 4760.0 | 620.0 | 75.0 | 455.0 | 0.0 | 61.0 | 0.0 | 11.0 | 18.0 | 4140.0 | MULTIPOLYGON (((-118.34390 33.93581, -118.3439... | 13.025210 | 86.974790 | 9.558824 | 1.281513 | . 2225 14000US06037910403 | Census Tract 9104.03, Los Angeles, CA | 2278.0 | 311.0 | 92.0 | 131.0 | 0.0 | 33.0 | 3.0 | 41.0 | 11.0 | 1967.0 | MULTIPOLYGON (((-118.13353 34.58122, -118.1331... | 13.652327 | 86.347673 | 5.750658 | 1.448639 | . 2325 14000US06037980008 | Census Tract 9800.08, Los Angeles, CA | 68.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 68.0 | MULTIPOLYGON (((-118.50267 34.22121, -118.5015... | 0.000000 | 100.000000 | 0.000000 | 0.000000 | . 406 rows × 17 columns . gdf[gdf[&#39;Percent Hispanic&#39;] &gt; 90].plot(figsize=(12,10)) . &lt;AxesSubplot:&gt; . Now it&#39;s your turn! Create map plots based on other race indicators with varying segments of the population. When you are done, post your map to the class gallery (right click the image, copy, and paste) gdf[gdf[&#39;Percent Non Hispanic Black&#39;] &lt; 80] . geoid name Total Non Hispanic Non Hispanic White Non Hispanic Black Non Hispanic American Indian and Alaska Native Non Hispanic Asian Non Hispanic Native Hawaiian and Other Pacific Islander Non Hispanic Some other race Non Hispanic Two or more races Hispanic geometry Percent Non Hispanic Percent Hispanic Percent Non Hispanic Black Percent Non Hispanic Asian . 1 14000US06037101110 | Census Tract 1011.10, Los Angeles, CA | 4283.0 | 3095.0 | 2616.0 | 19.0 | 3.0 | 331.0 | 3.0 | 8.0 | 115.0 | 1188.0 | MULTIPOLYGON (((-118.30229 34.25870, -118.3009... | 72.262433 | 27.737567 | 0.443614 | 7.728228 | . 2 14000US06037101122 | Census Tract 1011.22, Los Angeles, CA | 3405.0 | 3258.0 | 2882.0 | 74.0 | 15.0 | 220.0 | 0.0 | 0.0 | 67.0 | 147.0 | MULTIPOLYGON (((-118.30334 34.27371, -118.3033... | 95.682819 | 4.317181 | 2.173275 | 6.461087 | . 3 14000US06037101210 | Census Tract 1012.10, Los Angeles, CA | 6347.0 | 3731.0 | 2986.0 | 198.0 | 0.0 | 486.0 | 0.0 | 47.0 | 14.0 | 2616.0 | MULTIPOLYGON (((-118.29945 34.25598, -118.2979... | 58.783677 | 41.216323 | 3.119584 | 7.657161 | . 4 14000US06037101220 | Census Tract 1012.20, Los Angeles, CA | 3702.0 | 2338.0 | 1812.0 | 87.0 | 0.0 | 341.0 | 0.0 | 0.0 | 98.0 | 1364.0 | MULTIPOLYGON (((-118.28593 34.25227, -118.2859... | 63.155051 | 36.844949 | 2.350081 | 9.211237 | . 5 14000US06037101300 | Census Tract 1013, Los Angeles, CA | 3884.0 | 3587.0 | 3126.0 | 205.0 | 0.0 | 194.0 | 0.0 | 0.0 | 62.0 | 297.0 | MULTIPOLYGON (((-118.27822 34.25068, -118.2782... | 92.353244 | 7.646756 | 5.278064 | 4.994851 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2334 14000US06037980021 | Census Tract 9800.21, Los Angeles, CA | 33.0 | 18.0 | 4.0 | 0.0 | 0.0 | 14.0 | 0.0 | 0.0 | 0.0 | 15.0 | MULTIPOLYGON (((-118.40183 34.26509, -118.4017... | 54.545455 | 45.454545 | 0.000000 | 42.424242 | . 2337 14000US06037980024 | Census Tract 9800.24, Los Angeles, CA | 223.0 | 169.0 | 136.0 | 16.0 | 6.0 | 11.0 | 0.0 | 0.0 | 0.0 | 54.0 | MULTIPOLYGON (((-118.51849 34.18389, -118.5184... | 75.784753 | 24.215247 | 7.174888 | 4.932735 | . 2339 14000US06037980026 | Census Tract 9800.26, Los Angeles, CA | 26.0 | 19.0 | 7.0 | 11.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | 7.0 | MULTIPOLYGON (((-118.35173 34.28034, -118.3517... | 73.076923 | 26.923077 | 42.307692 | 0.000000 | . 2342 14000US06037980031 | Census Tract 9800.31, Los Angeles, CA | 1175.0 | 788.0 | 393.0 | 232.0 | 26.0 | 36.0 | 24.0 | 25.0 | 52.0 | 387.0 | MULTIPOLYGON (((-118.29105 33.75378, -118.2905... | 67.063830 | 32.936170 | 19.744681 | 3.063830 | . 2343 14000US06037980033 | Census Tract 9800.33, Los Angeles, CA | 16.0 | 16.0 | 0.0 | 0.0 | 16.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | MULTIPOLYGON (((-118.24897 33.75590, -118.2470... | 100.000000 | 0.000000 | 0.000000 | 0.000000 | . 2321 rows × 17 columns . gdf[gdf[&#39;Percent Non Hispanic Black&#39;] &lt; 80].plot(figsize=(12,10)) . &lt;AxesSubplot:&gt; . Add a basemap . Adding a basemap to a geopandas plot can be done using the contextily library. To do so, you must: . reproject your geodataframe to Web Mercator (epsg: 3857) | add a basemap, use the following guidelines | . gdf_web_mercator = gdf.to_crs(epsg=3857) . fig, ax = plt.subplots(figsize=(15, 15)) # add the layer with ax=ax in the argument gdf_web_mercator[gdf_web_mercator[&#39;Percent Hispanic&#39;] &gt; 50].plot(ax=ax, alpha=0.8) # turn the axis off ax.axis(&#39;off&#39;) # set a title ax.set_title(&#39;Census Tracts with more than 50% Hispanic Population&#39;,fontsize=16) # add a basemap ctx.add_basemap(ax) . Now it&#39;s your turn! Add your final maps to the class gallery (right click the image, copy, and paste) gdf_web_mercator = gdf.to_crs(epsg=3857) . fig, ax = plt.subplots(figsize=(15, 15)) # add the layer with ax=ax in the argument gdf_web_mercator[gdf_web_mercator[&#39;Percent Non Hispanic Asian&#39;] &lt; 50].plot(ax=ax, alpha=0.8) # turn the axis off ax.axis(&#39;off&#39;) # set a title ax.set_title(&#39;Census Tracts with less than 50% Non Hispanic Asian Population&#39;,fontsize=16) # add a basemap ctx.add_basemap(ax) .",
            "url": "https://anthonybruin.github.io/Assignment-09---Data-analysis-communication/fastpages/jupyter/2022/03/25/Assignment-week-9.html",
            "relUrl": "/fastpages/jupyter/2022/03/25/Assignment-week-9.html",
            "date": " • Mar 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://anthonybruin.github.io/Assignment-09---Data-analysis-communication/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://anthonybruin.github.io/Assignment-09---Data-analysis-communication/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://anthonybruin.github.io/Assignment-09---Data-analysis-communication/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anthonybruin.github.io/Assignment-09---Data-analysis-communication/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}